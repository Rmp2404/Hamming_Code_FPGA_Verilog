`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 31.08.2024 01:29:03
// Design Name: 
// Module Name: hamming__decoder
// Project Name: Hamming Code
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module hamming_decoder(
    input [6:0] codeword_in,
    output reg [3:0] data_out,
    output reg error
);
    wire p1_received = codeword_in[3];
    wire p2_received = codeword_in[5];
    wire p3_received = codeword_in[6];
    
    wire p1_calc = codeword_in[0] ^ codeword_in[1] ^ codeword_in[3];
    wire p2_calc = codeword_in[0] ^ codeword_in[2] ^ codeword_in[3];
    wire p3_calc = codeword_in[1] ^ codeword_in[2] ^ codeword_in[3];

    // Syndrome calculation
    wire [2:0] syndrome = {p3_received ^ p3_calc, p2_received ^ p2_calc, p1_received ^ p1_calc};

    always @(*) begin
        error = (syndrome != 3'b000);  // Set error flag if syndrome is non-zero
        data_out = codeword_in[6:3];   // Default data_out from the codeword

        // Correct the bit if error detected
        case(syndrome)
            3'b001: data_out[0] = ~data_out[0];  // Error in bit 0
            3'b010: data_out[1] = ~data_out[1];  // Error in bit 1
            3'b011: data_out[3] = ~data_out[3];  // Error in bit 3
            3'b100: data_out[2] = ~data_out[2];  // Error in bit 2
            default: ; // No error
        endcase
    end
endmodule
